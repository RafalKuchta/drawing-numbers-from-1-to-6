{"version":3,"sources":["Draw.js","App.js","serviceWorker.js","index.js"],"names":["Draw","props","numbers","Object","toConsumableArray","index","finish","length","console","log","react_default","a","createElement","Fragment","type","class","onClick","draw","App","state","number","iID","handleDraw","i","Math","floor","random","push","_this","setState","setInterval","this","clearInterval","className","src_Draw","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAgCeA,EA5BF,SAACC,GAEV,IAAIC,EAAOC,OAAAC,EAAA,EAAAD,CAAOF,EAAMC,SACpBG,EAAQJ,EAAMI,MACdC,EAASL,EAAMK,OAUnB,OARDD,IAAUH,EAAQK,SAEjBD,GAAS,GAIVE,QAAQC,IAAIR,GAGPS,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,MAAM,kBAAkBC,QAASf,EAAMgB,MAA7D,SAAiFP,EAAAC,EAAAC,cAAA,WAEjFF,EAAAC,EAAAC,cAAA,YACCN,EAASJ,EAAQA,EAAQK,OAAO,GAAKL,EAAQG,MCkCvCa,6MAnDbC,MAAQ,CACNjB,QAAS,GACTkB,OAAQ,MACRf,OAAQ,EACRgB,IAAK,EACLf,QAAQ,KAIVgB,WAAa,WAGX,IADA,IAAIpB,EAAU,GACLqB,EAAI,EAAGA,EAAI,GAAIA,IAAI,CAE1B,IAAIH,EAASI,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,GAC5CxB,EAAQyB,KAAKP,GAEbQ,EAAKC,SAAS,CACZT,SACAlB,UACAG,OAAQ,IAKd,IAAIgB,EAAMS,YAAY,WACpBF,EAAKC,SAAS,CACVxB,MAAOuB,EAAKT,MAAMd,MAAQ,EAC1BgB,SAEH,6EASD,OAHGU,KAAKZ,MAAMd,QAAU0B,KAAKZ,MAAMjB,QAAQK,QACzCyB,cAAcD,KAAKZ,MAAME,KAGzBX,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAMd,OAAQW,KAAKZ,MAAMC,OAAQlB,QAAS6B,KAAKZ,MAAMjB,QAASe,KAAMc,KAAKT,WAAYjB,MAAO0B,KAAKZ,MAAMd,MAAOC,OAAQyB,KAAKZ,MAAMb,kBA9CvH6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8b4c6bd8.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './App.css'\r\n\r\nconst Draw = (props) => {\r\n\r\n    let numbers = [...props.numbers]\r\n    let index = props.index\r\n    let finish = props.finish\r\n\r\nif(index === numbers.length){\r\n\r\n    finish = true\r\n    \r\n   }\r\n\r\n   console.log(props)\r\n    \r\n    return (\r\n        <>\r\n        <button type=\"button\" class=\"btn btn-success\" onClick={props.draw}>Losuj</button><br/>\r\n   \r\n        <span>\r\n        {finish ? numbers[numbers.length-1] : numbers[index]}\r\n                \r\n        </span>\r\n       \r\n        </>\r\n     );\r\n\r\n}\r\n \r\nexport default Draw;","import React, { Component } from 'react';\nimport './App.css';\nimport Draw from './Draw'\n\nclass App extends Component {\n\n  state = {\n    numbers: [],\n    number: \"---\",\n    index: -1,\n    iID: 1,\n    finish: false\n  }\n\n\n  handleDraw = () => {\n\n    let numbers = []\n    for (let i = 0; i < 50; i++){\n\n      let number = Math.floor(Math.random() * 6 + 1)\n      numbers.push(number)\n         \n      this.setState({\n        number,\n        numbers,\n        index: -1\n      })\n  }\n    \n\n  let iID = setInterval(()=>{\n    this.setState({\n        index: this.state.index + 1,\n        iID\n    })\n  }, 50)\n\n}\n\n\n  render() {\n    if(this.state.index === this.state.numbers.length){\n      clearInterval(this.state.iID)\n     }\n    return (\n      <div className=\"app\">\n        <>\n        <h1>Losowanie liczby od 1 do 6</h1>\n        <hr/>\n        <Draw number={this.state.number} numbers={this.state.numbers} draw={this.handleDraw} index={this.state.index} finish={this.state.finish}/>\n        </>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}